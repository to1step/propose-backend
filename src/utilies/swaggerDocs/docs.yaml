openapi: 3.0.3
info:
  version: 1.0.0
  title: to1step api docs
  description: to1step backend api 문서
  contact:
    email: gkqkehs0321@gmail.com
tags:
  - name: AuthController
    description: 인증 관련 api
  - name: UserController
    description: 유저 관련 api
  - name: CourseController
    description: 코스 관련 api
  - name: StoreController
    description: 가게 관련 api
paths:
  /v1/auth/local/sign-in:
    post:
      tags:
        - AuthController
      summary: 로컬 로그인
      description: 로컬 로그인
      requestBody:
        description: LocalSignInDto
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocalSignInDto"
      responses:
        '200':
          description: 로그인 성공
          headers:
            Set-Cookie:
              description: 쿠기 값
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
                    description: 로그인 성공
                    example: true
  /v1/auth/local/email-validation:
    post:
      tags:
        - AuthController
      summary: 이메일 중복체크
      description: 이메일 다른 유저가 사용중인지 확인
      requestBody:
        description: EmailValidationDto
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailValidationDto"
      responses:
        '200':
          description: 이메일 사용가능 여부
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
                    description: 사용중이면 true / 사용중이 아니면 false 반환
                    example: true
  /v1/auth/local/nickname-validation:
    post:
      tags:
        - AuthController
      summary: 닉네임 중복체크
      description: 닉네임 다른 유저가 사용중인지 확인
      requestBody:
        description: NicknameValidationDto
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NicknameValidationDto"
      responses:
        '200':
          description: 닉네임 사용가능 여부
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
                    description: 사용중이면 true / 사용중이 아니면 false 반환
                    example: true
  /v1/auth/local/email-code:
    post:
      tags:
        - AuthController
      summary: 인증메일 전송
      description: 유저정보 redis에 저장, 인증메일 전송
      requestBody:
        description: UserDataDto
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDataDto"
      responses:
        '200':
          description: 인증 메일 전송 여부
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
                    description: 이메일 전송 성공
                    example: true
  /v1/auth/local/email-verification:
    post:
      tags:
        - AuthController
      summary: 이메일 인증 및 유저 회원가입
      description: redis에 저장된 인증번호와 비교 후 일치 시 유저 회원가입
      requestBody:
        description: EmailVerificationDto
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailVerificationDto"
      responses:
        '200':
          description: 회원가입 성공 즉시 로그인
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
                    description: 회원가입 성공
                    example: true
  /v1/auth/reissue:
    post:
      tags:
        - AuthController
      summary: 토큰 재발급
      description: refreshToken을 header에 담아 요청 토큰이 유효하다면 accessToken 재발급
      parameters:
        - in: header
          name: refreshToken
      responses:
        '200':
          description: accessToken 갱신
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
                    description: 토큰 재발급 성공
                    example: true
  /v1/auth/sign-out:
    post:
      tags:
        - AuthController
      summary: 로그아웃
      description: 토큰이 유효한 유저를 로그아웃시킴
      parameters:
        - in: header
          name: refreshToken
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
                    description: 로그아웃 성공
                    example: true
components:
  schemas:
    EmailVerificationDto:
      type: object
      required:
        - email
        - code
      properties:
        email:
          type: string
          description: 유저 이메일
          example: aaa@example.com
        code:
          type: string
          description: 해당 이메일로 전송된 8자리 인증번호
          example: 8JS4KF2D
    EmailValidationDto:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          description: 사용하려는 이메일
          example: aaa@example.com
    LocalSignInDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: 유저 이메일
          example: aaa@example.com
        password:
          type: string
          description: 유저 비밀번호
          example: password123
    NicknameValidationDto:
      type: object
      required:
        - nickname
      properties:
        nickname:
          type: string
          description: 사용하려는 닉네임
          example: minwoo123
    UserDataDto:
      type: object
      required:
        - email
        - nickname
        - password
      properties:
        email:
          type: string
          description: 유저 이메일
          example: aaa@example.com
        password:
          type: string
          description: 유저 비밀번호
          example: password123
        nickname:
          type: string
          description: 유저 닉네임
          example: minwoo123
